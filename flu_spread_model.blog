type County;
type Region;

distinct County counties[82];
distinct Region regions[9];

// ----
// define hyperparameters
// ----
random Real rho ~ Gamma(1.05, 0.5);
random Real tau1 ~ Gamma(3.0, 0.1);
random Real tau2 ~ Gamma(10.0, 0.1);
random Real beta1 ~ Gaussian(0.0, 10.0);
random Real beta2 ~ Gaussian(0.0, 10.0);

// ----
// load data
// ----
fixed RealMatrix county_pop = loadRealMatrix("data_processed/county_pops.txt");
fixed RealMatrix region_pop = loadRealMatrix("data_processed/region_pops.txt");
fixed RealMatrix county_map = loadRealMatrix("data_processed/county_map.txt");

fixed RealMatrix covariates1 = loadRealMatrix("data_processed/covariates1.txt");
fixed RealMatrix covariates2 = loadRealMatrix("data_processed/covariates2.txt");
fixed RealMatrix corr_cov = loadRealMatrix("data_processed/corr_cov.txt");
random RealMatrix corr_cov_init ~ loadRealMatrix("data_processed/corr_cov.txt") * tau1;
random RealMatrix corr_cov_timestep ~ corr_cov * rho;

// ----
// correlation at each timestep is GMRF over the counties,
// with mean centered around the previous timestep.
// ----
random RealMatrix correlation(Timestep t) ~
  if t == @0 then
    PrecisionGaussian(zeros(82, 1), corr_cov_init)
  else
    PrecisionGaussian(correlation(prev(t)), corr_cov_timestep);

random Real noise(County c, Timestep t) ~
  Gaussian(0.0, 1.0 / tau2);

// ----
// county rate calculated by logit model.
// ----
random Real logit(County c, Timestep t) ~
  toReal(beta1 * covariates1[toInt(c)][toInt(t)] +
         beta2 * covariates2[toInt(c)][toInt(t)] +
         correlation(t)[toInt(c)]) +
         noise(c, t);

random Real county_rate(County c, Timestep t) ~
  exp(logit(c, t)) / (1.0 + exp(logit(c, t)));

// ----
// region rate is the sum over county rates
//   (make nondeterministic as Gaussian with very small variance)
// ----
random Real region_rate(Region r, Timestep t) ~
  Gaussian(
    sum({
      (county_rate(c, t) * county_pop[toInt(c)])
      for County c : county_map[toInt(r)][toInt(c)] == 1.0
    }) / region_pop[toInt(r)],
  0.001);
