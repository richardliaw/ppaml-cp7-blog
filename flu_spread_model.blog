// ----
// define hyperparameters
// ----
/*random Real rho ~ Gamma(1.05, 0.5);*/
/*random Real tau1 ~ Gamma(3.0, 0.1);*/
/*random Real beta1 ~ Categorical({10 -> 0.3, 8 -> 0.3, 4 -> 0.4}) / 10.0;*/
random Real beta1 ~ TruncatedGauss(1.5, 0.1, 1.0, 2.0);
random Real beta2 ~ TruncatedGauss(0.25, 0.1, 0.0, 0.5);
fixed Real rho = 0.25;
fixed Real tau1 = 0.50;
random Real bias ~ Gaussian(-6.5, 0.1);

// ----
// load data
// ----
fixed RealMatrix county_map = loadRealMatrix("data_processed/county_map.txt");
fixed RealMatrix region_pop = loadRealMatrix("data_processed/region_pops.txt");

fixed RealMatrix covariates1 = loadRealMatrix("data_processed/covariates1.txt");
fixed RealMatrix covariates2 = loadRealMatrix("data_processed/covariates2.txt");

fixed RealMatrix priors = loadRealMatrix("data_processed/priors.txt");
fixed RealMatrix D = loadRealMatrix("data_processed/D.txt");
fixed RealMatrix W = loadRealMatrix("data_processed/W.txt");

fixed RealMatrix observations = loadRealMatrix("data_processed/obs.txt");
fixed RealMatrix spatial_obs = loadRealMatrix("data_processed/spatial_obs.txt");
fixed RealMatrix temporal_obs = loadRealMatrix("data_processed/temporal_obs.txt");

// ---
// utility functions to convert integers to objects.
// ---
fixed Week toWeek(Integer i) = i;
fixed County toCounty(Integer i) = i;

// ---
// utility function to calculate sigmoid.
// ---
fixed Real sigmoid(Real value) = 1.0 / (1.0 + exp(-1.0 * value));

// ---
// spatio-temporal correlation has a prior distributed Gaussian with mean
// at the logit of the region rate (from observations), and with
// variance defined by the diagonal matrix.
// ---
/*random Real y(County c, Week t) ~*/
/*  Gaussian(bias, D[toInt(c)]);*/

// ---
// define spatial edges and temporal edges and observe them to be true.
// using Metropolis-Hastings or Gibbs Sampling, the actual parameter into
// the boolean distribution doesn't matter because only likelihoods are
// considered (thanks Nishant!).
// ---
random Boolean temporal_edge(County c, TemporalPair t) ~
  BooleanDistrib( exp(1.0 * tau1 *
                      (logit(c, toWeek(toInt(temporal_obs[toInt(t)][0]))) - bias)*
                      (logit(c, toWeek(toInt(temporal_obs[toInt(t)][1]))) - bias)));

random Boolean spatial_edge(Week t, SpatialPair s) ~
  BooleanDistrib( exp(1.0 * tau1 * rho *
                      (logit(toCounty(toInt(spatial_obs[toInt(s)][0])), t) - bias)*
                      (logit(toCounty(toInt(spatial_obs[toInt(s)][1])), t) - bias) ));

obs temporal_edge(c, t) = true for County c, TemporalPair t;
obs spatial_edge(t, s) = true for Week t, SpatialPair s;

// ----
// county rate is calculated by logit model.
// ----
random Real logit(County c, Week t) ~
  Gaussian(toReal(bias +
                  beta1 * covariates1[toInt(c)][toInt(t)] +
                  beta2 * covariates2[toInt(c)][toInt(t)]), D[toInt(c)]);

// ----
// region rate is the sum over county rates -- set up in preprocessing
//   (make nondeterministic as Gaussian with very small variance)
// ----
